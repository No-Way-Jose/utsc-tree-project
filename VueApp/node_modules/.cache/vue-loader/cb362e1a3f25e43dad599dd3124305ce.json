{"remainingRequest":"/Users/riceboy/RiceBoy Documents/UTSC Course Tree/VueApp/utsc-tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/riceboy/RiceBoy Documents/UTSC Course Tree/VueApp/utsc-tree/src/components/CourseDirectory.vue?vue&type=style&index=0&id=4e9e04dc&scoped=true&lang=css&","dependencies":[{"path":"/Users/riceboy/RiceBoy Documents/UTSC Course Tree/VueApp/utsc-tree/src/components/CourseDirectory.vue","mtime":1572552344291},{"path":"/Users/riceboy/RiceBoy Documents/UTSC Course Tree/VueApp/utsc-tree/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/riceboy/RiceBoy Documents/UTSC Course Tree/VueApp/utsc-tree/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/riceboy/RiceBoy Documents/UTSC Course Tree/VueApp/utsc-tree/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/riceboy/RiceBoy Documents/UTSC Course Tree/VueApp/utsc-tree/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Users/riceboy/RiceBoy Documents/UTSC Course Tree/VueApp/utsc-tree/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/riceboy/RiceBoy Documents/UTSC Course Tree/VueApp/utsc-tree/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmRpclNpZGV7CiAgaGVpZ2h0OiA4M3ZoOwogIG92ZXJmbG93LXk6IGF1dG87Cn0KLmNvbnRhaW5lcnsKICBtYXgtd2lkdGg6IDk1JTsKfQouY291cnNlU2VhcmNoewogIG1heC13aWR0aDogOTAlOwp9Cgo="},{"version":3,"sources":["CourseDirectory.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CourseDirectory.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <!-- Container to hold the directory and course information -->\n  <v-container class=\"container\">\n    <v-row >\n      <v-col class=\"dirSide\">\n        <v-text-field\n          v-model=\"search\"\n          label=\"Search for a course ...\"\n          hint=\"Ex. 'CSCA08H3' or 'Elementary Musicianship I'\"\n          flat\n          clearable\n          class=\"courseSearch\"\n        ></v-text-field>\n        <!-- Tree view section with its attributes/qualities  -->\n        <v-treeview\n          :items=items\n          return-object\n          hoverable\n          dense\n          activatable\n          open-on-click\n          transition\n          color=\"warning\"\n          rounded\n          :search=\"search\"\n          :filter=\"filter\"\n          :open.sync=\"open\"\n        >\n          <!-- This template allows for events on every course so can bring up course info when clicked -->\n          <template slot=\"label\" slot-scope=\"{ item }\">\n            <a @click=\"getCourseInfo(item)\">{{ item.name }}</a>\n          </template>\n          <template v-slot:prepend=\"{ item }\">\n            <v-icon\n              v-if=\"item.children\"\n              v-text=\"`mdi-${item.id === 1}`\"\n            ></v-icon>\n          </template>\n        </v-treeview>\n      </v-col>\n\n      <v-divider vertical></v-divider>\n\n      <!-- Right column to hld the course information -->\n      <v-col class=\"pa-6\" cols=\"6\">\n        <template>\n          <!-- If they've clicked a course display the information -->\n          <div v-if=\"courseInfo.name !== 'Select a course to view more information ...'\">\n            <h1>{{ courseInfo.name }}</h1>\n            <br><br>\n            <h2>Course Information:</h2>\n            {{ courseInfo.desc }}\n            <br><br>\n            <h2>Prerequisites:</h2>\n            {{ courseInfo.pre }}\n            <br><br>\n            <h3>Exclusions:</h3>\n            {{ courseInfo.excl }}\n            <br><br>\n            <h3>Student Limit:</h3>\n            {{ courseInfo.limit }}\n            <br><br>\n            <h3>Breadth Requirement:</h3>\n            {{ courseInfo.breadth }}\n          </div>\n          <!-- If they haven't selected a course output a default message-->\n          <div v-else>\n            <h4> {{ courseInfo.name }} </h4>\n          </div>\n        </template>\n      </v-col>\n\n    </v-row>\n\n  </v-container>\n\n</template>\n\n<script>\n// Import axios since using APIs to fetch data\nimport axios from 'axios'\nexport default {\n  data: () => ({\n    // Course info object\n    courseInfo: { name: 'Select a course to view more information ...',\n      desc: '',\n      pre: '',\n      excl: '',\n      limit: '',\n      breadth: '' },\n    // Treeview course data\n    items: [],\n    open: [1, 2],\n    search: null,\n    caseSensitive: false\n  }),\n  // API call upon creation to populate the course directory\n  created () {\n    axios.get('http://127.0.0.1:5000/DataRetrieval/directory')\n      .then(response => {\n        // Run a loop to append the data\n        for (let section in response.data) {\n          this.items.push(response.data[section])\n        }\n      })\n      // Catch any errors\n      .catch(e => {\n        this.errors.push(e)\n      })\n  },\n  // Filter for search functionality\n  filter () {\n    return this.caseSensitive\n      ? (item, search, textKey) => item[textKey].indexOf(search) > -1\n      : undefined\n  },\n  methods: {\n    // This method will create an API call to get the info related to the course and update the variable\n    getCourseInfo: function (courses) {\n      // Array to store course letters to check if they clicked on a course or no\n      let alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'W']\n      // If they clicked on a letter or category and not a course output a default message\n      if ((alphabet.includes(courses.name)) || !(courses.name.match(/[A-Z]{4}[0-9]{2}[A-Z][0-9]/))) {\n        this.courseInfo.name = 'Select a course to view more information ...'\n      } else {\n        // If they actually clicked a course use API call passing in course to get its info\n        let url = 'http://127.0.0.1:5000/DataRetrieval/courseInfo/' + courses.name\n        axios.get(url)\n          .then(response => {\n            let info = (response.data)\n            // Fill the object with the course information to output\n            this.courseInfo.name = courses.name\n            this.courseInfo.desc = info.desc\n            this.courseInfo.pre = info.pre\n            this.courseInfo.excl = info.ex\n            this.courseInfo.limit = info.limit\n            this.courseInfo.breadth = info.breadth\n          })\n          // Catch any errors\n          .catch(e => {\n            this.errors.push(e)\n          })\n      }\n    }\n  }\n}\n\n</script>\n\n<style scoped>\n  .dirSide{\n    height: 83vh;\n    overflow-y: auto;\n  }\n  .container{\n    max-width: 95%;\n  }\n  .courseSearch{\n    max-width: 90%;\n  }\n\n</style>\n"]}]}